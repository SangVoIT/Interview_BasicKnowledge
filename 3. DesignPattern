Author: SANG VO
Created Date: 2020/06/19
TOPIC: Javascript
Note: Design Pattern
-------------------------------------------------------------------------------
I. Creational Pattern:
1.1 Factory Pattern
1.2 Abstract Factory Pattern
1.3 Singleton Pattern
1.4 Prototype Pattern
II. Structural Pattern:
2.1 Adapter Pattern
2.2 Bridge Pattern
2.3 Composition Pattern
III. Behavior Pattern
3.1 Observer Pattern
3.2 Strategy Pattern
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
I. Creational Pattern:
1.1 Factory Pattern
Useful:
	+ Define an interface or abstract class for creating an object 
	[< IMPORTANT:  Let "the subclasses decide which class to instantiate" -->]
Sample:
	--------------------------------
	<<abstractclass>> Car 
	--------------------------------
	Lexus 	(ExtendClass)
	Toyota 	(ExtendClass)
	Honda 	(ExtendClass)
	--------------------------------
	USING: 
	GetCarFactory {
		// Decide to  get an instance object (extendClass)
		public Car getCar(String carStyle) {
		// ... => create new object depend on carStyle parameter 
		}
	}
------------------------------------
1.2 Abstract Factory Pattern
Useful:
	In sample (1); 
	
Sample:
	----------------------------------------------------------------
	<<abstractclass>> AbstractFactory	
	<<abstract>> Car getCar();
	<<abstract>> BikeCycle getBikeCycle();
	--------------------------------
	<<abstractclass>> Car 			(AbstractFactoryClass)
	Lexus 	(ExtendClass)
	Toyota 	(ExtendClass)
	Honda 	(ExtendClass
	--------------------------------
	=> GetCarFactory Class
	{
	public Car getCar(String parameterCar) { => Create New object}
	}
	--------------------------------
	<<abstractclass>> BikeCycle 	(AbstractFactoryClass)
	NiTrek 	(ExtendClass)
	Giant  	(ExtendClass)
	Scott  	(ExtendClass)
	--------------------------------
	=> GetBikeCycleFactory Class	
	{
	public BikeCycle getBikeCycle(String parameterBikeCycle) { => Create New object}
	}
	-------------------------------- (***)
	<<Class>> FactoryCreator 
 	{
		Public AbstractFactory getFactory(String choice){}
	}
	----------------------------------------------------------------
	USING: 
	objVehicle {
		// Decide to  get an instance object (Car or BikeCycle)
	}

-------------------------------------------------------------------------------
1.3 Singleton Pattern
Useful:
	+ Define a class that has "only one instance"
	+ And provides a global point of access to it
Sample:
	class A{  
	 [< IMPORTANT:  private static A obj=new A();//Early, instance will be created at load time   -->]
	 private A(){}  
	   
	 public static A getA(){  
	  return obj;  
	 }  
	  
	 public void doSomething(){  
	 //write your code  
	 }  
	}  
-------------------------------------------------------------------------------
1.4 Prototype Pattern
Useful:
	+ Cloning of an existing object instead of creating new one 
	+ [< IMPORTANT: And can also be customized as per the requirement.-->]
	
Sample:
	--------------------------------
	Interface Prototype {
		Public Prototype getClone();
	}
	--------------------------------
	<<classImplement>> EmployeeRecord implements Prototype {
		Private intCheckIn;
		// Constructor
		Public EmployeeRecord(intCheckIn) {
			this.intCheckIn = intCheckIn + 1;
		}
		
		public void showRecord() {
			System.out.println("Check-in times: " + this.intCheckIn);
		}
		
		@Override
		public Prototype getClone() {
			return new EmployeeRecord();
		}
	}
	--------------------------------
	USING: 
	objCar {
		EmployeeRecord e1=new EmployeeRecord(1);  
        e1.showRecord();  					// Show first record
        System.out.println("\n");  
        EmployeeRecord e2=(EmployeeRecord) e1.getClone();  
        e2.showRecord();   					// Show next record 
	}

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
II. Structural Pattern:
2.1 Adapter Pattern
Useful:
	converts the interface of a class into another interface that a client wants

Sample:
	[< IMPORTANT:  Using methods of ExtendClass and "implement" methods an interface -->]
	public class BankCustomer extends BankDetails implements CreditCard {  
		...
	}
	
	BankCustomer extends BankDetails implements CreditCard
-------------------------------------------------------------------------------
2.2 Bridge Pattern
Useful:	
	decouple the functional abstraction from the implementation so that the two can vary independently.
	[< IMPORTANT: Like MVC mdoel, Controller _ Service & ServiceImplemnt (Independently) -->]
Sample:
	<<Interface>> QUESTION  <-  QUESTIONManager <- QUESTIONFormat
		
	<<Implement Interface>> QUESTIONImplement
	
	â€»Controller => Interface <= ImplementInterface
-------------------------------------------------------------------------------
2.3 Composition Pattern
Useful:
	allow clients to operate in generic manner on objects 
	that [< IMPORTANT:  may or may not represent a hierarchy of objects -->]

Sample:
	<<Interface>> Employee
	[CommonMethod]: getID, getNam, getSalary
	[PriorityMethod]: AddEmp, RemoveEmp,...
	<<Implement>> Accountant
		Implement: CommonMethod
	<<Implement>> Cashier
		Implement: CommonMethod
	<<Implement>> BankManager
		Implement: CommonMethod + PriorityMethod
	
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
III. Behavior Pattern
-------------------------------------------------------------------------------
3.1 Observer 
Useful:
	just define a one-to-one dependency so that when one object changes state, 
	[< IMPORTANT:  all its dependents are notified and updated automatically. -->]

	<<SubjectInterface>>
	class interface Subject  { public void notifyUpdate(Message m); }
	
	<<ImplementSubject>>
	class MessagePublisher implements Subject {
	    @Override
		public void notifyUpdate(Message m) {
			for(Observer o: observers) {
				o.update(m);
			}
		}
	}
	<<ObserverableClass>>
	public interface Observer { public void update(Message m); }
	
	<<Implement Observer>>
	public class MessageSubscriberOne implements Observer 
	{
		@Override
		public void update(Message m) {
			System.out.println("MessageSubscriberOne :: " + m.getMessageContent());
		}
	}

	<<Implement Observer>>
	public class MessageSubscriberTwo implements Observer 
	{
		@Override
		public void update(Message m) {
			System.out.println("MessageSubscriberTwo :: " + m.getMessageContent());
		}
	}
	
-------------------------------------------------------------------------------
3.2 Strategy Pattern
Useful:
	Defines a family of functionality, encapsulate each one, and make them interchangeable
	(LIKE Factory Pattern)
	
	public interface Strategy { public float calculation(float a, float b);  }
	
	public class Addition implements Strategy{}
	public class Subtraction  implements Strategy{ }
	public class Multiplication implements Strategy{  }
	
	{IMPORTANT}
	public class Context {  
		private Strategy strategy;  
       
        public Context(Strategy strategy){  
           this.strategy = strategy;  
        }  
	    
        public float executeStrategy(float num1, float num2){  
           return strategy.calculation(num1, num2);  
        }  
	}
	Using:
	public void main() {
		context = new Context(new Subtraction());       
		System.out.println("Subtraction = " + context.executeStrategy(value1, value2)); 
		
		context = new Context(new Multiplication());        
		System.out.println("Multiplication = " + context.executeStrategy(value1, value2));  
	}