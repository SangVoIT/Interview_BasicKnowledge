Author: SANG VO
Created Date: 2020/06/19
TOPIC: Javascript
Note: OOP Concept
-------------------------------------------------------------------------------
1. Java Abstract
2. Java Encapsulation
3. Java Inheritance
4. Java Polymorphism

[?] Abstract class vs Interface class
[?] Static vs NON-static
-------------------------------------------------------------------------------
1. Java Abstract Classes and Methods
Data abstraction is the process of hiding certain details and showing only essential information to the user.
	- Abstract class: is a restricted class that cannot be used to create objects
		(to access it, it must be inherited from another class)
	- Abstract method: 
		can only be used in an abstract class, and it does not have a body.
		The body is provided by the subclass 
		
Sample:
	public class Demo extends AbstractDemo{
		// ... 
		// AbstractDemo obj = new AbstractDemo(); 
		// => Error; abstract class is not have object
	}
-------------------------------------------------------------------------------
2. Java Encapsulation _ (Acess/non-access attribute setting)
Java Encapsulation is to make sure that "sensitive" data is hidden from users.
declare class variables/attributes as private
provide public get and set methods to access and update the value of a private variable
Sample:
	Private string sPhoneNumber; 	// Encapsulation
	Private string sAddress;		// Encapsulation
	Public string sName;			// Non-encapsulation

-------------------------------------------------------------------------------
3. Java Inheritance (Inherit attributes of parent class)
In Java, it is possible to inherit attributes and methods from one class to another. 
We group the "inheritance concept" into two categories:
	subclass (child) - the class that inherits from another class (JAVACODE: Extends parentClass)
	superclass (parent) - the class being inherited from
"Final": this class will be not inherit from a class.
Sample:
	Class Vehicle {
		protected String brand = "Ford";
	}
	=> class Car extends Vehicle {
		// in child class can used "brand" attribute of parent class
	}
	
	
-------------------------------------------------------------------------------
4. Java Polymorphism (Extend methods of parent class)
Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance.
Sample:
	class Animal {
		Public void animalSound() {...}
	}
	=> class Dog extends Animal {
		// Extend animalSound method with its attributes
	}
	=> class Cat extends Animal {
		// Extend animalSound method with its attributes
	}
	
-------------------------------------------------------------------------------
Private: Read/Modify: NON
Protected: Read: Yes,  Modify: NON
Public: Read/Modify: YES
-------------------------------------------------------------------------------


-------------------------------------------------------------------------------
					Abstract class  					Interface class:
Keyword: 			Abstract 						- 	Interface
Type of variable: 	Static, non-static				- 	Static
Access modifiers: 	All								- 	Only public access modifier
When to use:		To avoid independence			- 	For future enhancement

-------------------------------------------------------------------------------
		Static 											NON-static
Difine:	Static int intA;							-	int intA;
Memory:	When instance (object) is created			-	when loading of the method
		multiple times by whenever object is created-	Only once time in the program
		
		
-------------------------------------------------------------------------------